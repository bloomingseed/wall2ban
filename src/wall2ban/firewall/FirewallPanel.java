/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wall2ban.firewall;

import java.awt.Frame;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import wall2ban.ConfirmForm;
import utils.RestrictableTableModel;
import wall2ban.fail2ban.actionforms.ManageActionsForm;

/**
 *
 * @author xceeded
 */
public class FirewallPanel extends javax.swing.JPanel {

    /**
     * DAO for iptables.
     */
    private IPContext context;
    /**
     * Owning frame.
     */
    private Frame parent;
    
    final private Object[] tableHeaders;
    
    /**
     * Creates new form FirewallPanel
     * @param context
     * @param parent
     * @throws java.lang.Exception
     */
    public FirewallPanel(Frame parent) throws Exception {
        initComponents();
        
        tableHeaders = new String[]{"Index","Target","Source IP","Source port","Protocol","Destination IP","Destination Port"};
        
        refresh();
    }
    
    /**
     * Updates chains list.
     */
    private void bindChainsList(){
        List<String> list = new ArrayList<String>();    // creates empty chains list
        for(Chain c : context.getChainStore().readAll()){   // loops through each chain in dao
            list.add(c.getName());  // puts chain name to list
        }
        DefaultListModel<String> cListModel = new DefaultListModel<String>();  // creates new list model
        cListModel.addAll(list);    // adds all names in list to model
        chainsJList.setModel(cListModel);   // sets model for JList
    }
    /**
     * Binds table for a specified chain.
     * @param c 
     */
    private void bindRulesTable(Chain c){
        
        List<IPRule> rules = c.getRules();    // gets ip rules of the chain
        int rowsCount = rules.size();    // gets number of rules as rows
        Object[][] data = new Object[rowsCount][];  // creates sufficient 2D table with such number of rows
        int count = 0;  // initializes variable to count rows 
        for(IPRule rule : rules){   // loops through each rule in chain
            List<Object> row = new ArrayList<Object>(); // creates empty row
            // adds data to row
            row.add(++count);   // adds index
            row.add(rule.getTarget());
            row.add(rule.getSourceIp());
            row.add(rule.getSourcePort());
            row.add(rule.getProtocol());
            row.add(rule.getDestinationIp());
            row.add(rule.getDestinationPort());
            
            data[count-1] = row.toArray();  // sets row data to data table 
        }
        RestrictableTableModel model = new RestrictableTableModel(data,this.tableHeaders);   // creates table model with the data table
        model.setTableReadonly();   // makes table cells readonly
        this.rulesTable.setModel(model);    // sets model to table component
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        rulesTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        addChainButton = new javax.swing.JButton();
        renameChainButton = new javax.swing.JButton();
        deleteChainButton = new javax.swing.JButton();
        createRuleButton = new javax.swing.JButton();
        updateRuleButton = new javax.swing.JButton();
        deleteRuleButton = new javax.swing.JButton();
        resetDefaultsButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        chainsJList = new javax.swing.JList<>();
        refreshButton = new javax.swing.JButton();

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Rules:");

        rulesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Index", "Jump", "Source IP", "Source port", "Protocol", "Destination IP", "Destination port"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rulesTable.setShowGrid(true);
        jScrollPane6.setViewportView(rulesTable);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Chains");

        addChainButton.setText("Add Chain");
        addChainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addChainButtonActionPerformed(evt);
            }
        });

        renameChainButton.setText("Rename Chain");
        renameChainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameChainButtonActionPerformed(evt);
            }
        });

        deleteChainButton.setText("Delete Chain");
        deleteChainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteChainButtonActionPerformed(evt);
            }
        });

        createRuleButton.setText("Create Rule");
        createRuleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createRuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRuleButtonActionPerformed(evt);
            }
        });

        updateRuleButton.setText("Update Rule");
        updateRuleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        updateRuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateRuleButtonActionPerformed(evt);
            }
        });

        deleteRuleButton.setText("Delete Rule");
        deleteRuleButton.setToolTipText("");
        deleteRuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRuleButtonActionPerformed(evt);
            }
        });

        resetDefaultsButton.setText("Reset Defaults");
        resetDefaultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetDefaultsButtonActionPerformed(evt);
            }
        });

        chainsJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        chainsJList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chainsJListMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(chainsJList);

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(refreshButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(deleteChainButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(renameChainButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addChainButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 721, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(createRuleButton)
                                .addGap(59, 59, 59)
                                .addComponent(updateRuleButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteRuleButton)
                                .addGap(49, 49, 49)
                                .addComponent(resetDefaultsButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refreshButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addChainButton)
                        .addComponent(createRuleButton))
                    .addComponent(resetDefaultsButton)
                    .addComponent(deleteRuleButton)
                    .addComponent(updateRuleButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(renameChainButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteChainButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addChainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addChainButtonActionPerformed
        ConfigureChainForm createForm = new ConfigureChainForm(parent,true,null); // creates form
        createForm.setLocationRelativeTo(parent);   // sets form at center of parent frame
        createForm.setVisible(true);    // shows form
        if(createForm.getFormResult()){ // if name is set
            String name = createForm.getChainName();    // gets chosen name
            Chain chain = new Chain(name);  // creates new chain with such name
            try {
                context.getChainStore().create(chain);  // inserts chain to context
                bindChainsList();   // updates chains list
            } catch (Exception ex) {    // checks if failed
                Logger.getLogger(FirewallPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(parent, "Failed to create chain "+name+
                "\nError:"+ex.getMessage());
            }
        }
    }//GEN-LAST:event_addChainButtonActionPerformed

    private void renameChainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameChainButtonActionPerformed
        int chainIndex = chainsJList.getSelectedIndex();    // gets selected chain index
        if(chainIndex < 0)  // checks if user click is not a valid item
            return;
        if(chainIndex<3){    // checks if user clicked one of the default chains
            JOptionPane.showMessageDialog(parent, "Cannot rename default chains");
            return;
        }
            String chainName = chainsJList.getSelectedValue();  // gets selected chain name in JList
            Chain c = context.getChainStore().readByKey(chainName); // gets chain from context
            
            ConfigureChainForm updateForm = new ConfigureChainForm(parent,true,c);  // creates rename form
            updateForm.setLocationRelativeTo(parent);   // sets form at middle of parent frame
            updateForm.setVisible(true);    // shows form
            if(updateForm.getFormResult()){ // if name is set
                String name = updateForm.getChainName();    // gets chosen name
                
                try {
                    context.getChainStore().rename(c,name); // renames chain in context
                    bindChainsList();   // updates chains list
                } catch (Exception ex) {    // checks if failed
                    Logger.getLogger(FirewallPanel.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(parent, "Failed to create chain "+name+
                            "\nError:"+ex.getMessage());
                }
            }
        
        

    }//GEN-LAST:event_renameChainButtonActionPerformed

    private void deleteChainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteChainButtonActionPerformed
        int chainIndex = chainsJList.getSelectedIndex();    // gets selected chain index
        if(chainIndex < 0)  // checks if user click is not a valid item
            return;
        if(chainIndex<3){    // checks if user clicked one of the default chains
            JOptionPane.showMessageDialog(parent, "Cannot delete default chains");
            return;
        }
        String chainName = chainsJList.getSelectedValue();  // gets selected chain name in JList
        Chain c = context.getChainStore().readByKey(chainName); // gets chain from context

        ConfirmForm form = new ConfirmForm(parent,true);  // creates confirm delete form
        form.setLocationRelativeTo(parent); // sets form in middle of parent frame
        form.setMessage("Delete chain "+chainName+"?"); // sets form displaying message
        form.setVisible(true);    // shows form
        if(form.getFormResult()){ // if user chosen delete

            try {
                context.getChainStore().delete(c);  // deletes chain from context
                bindChainsList();   // updates chains list
            } catch (Exception ex) {    // checks if failed
                Logger.getLogger(FirewallPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(parent, "Failed to create chain "+chainName+
                        "\nError:"+ex.getMessage());
            }
        }
    }//GEN-LAST:event_deleteChainButtonActionPerformed

    private void createRuleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRuleButtonActionPerformed
        if(this.chainsJList.getSelectedIndex()<0)   // checks if user clicked a invalid area
            return;    // stops
        String chainName = chainsJList.getSelectedValue();  // gets selected chain name in JList
        Chain c = context.getChainStore().readByKey(chainName); // gets chain from context
        ConfigureRuleDialog form = new ConfigureRuleDialog(parent, true, null,chainName);   // creates create form
        form.setLocationRelativeTo(parent); // sets form in middle of parent frame
        form.setVisible(true);  // shows form
        if(form.getFormResult()){   // if chosen to proceed
            IPRule rule = form.getRule();   // gets configured rule
            rule.setOwner(c);   // appends rule to chain
            try {
                context.getRuleStore().create(rule);    // creates such rule
                bindRulesTable(c);  // updates chain rules table
            } catch (Exception ex) {    // checks if failed
                rule.setOwner(null);
                Logger.getLogger(FirewallPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(parent, "Failed to create rule\nError:"+ex.getMessage());
            }
        }
    }//GEN-LAST:event_createRuleButtonActionPerformed

    private void updateRuleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateRuleButtonActionPerformed
        int ruleIndex = rulesTable.getSelectedRow();    // gets selected row
        if(ruleIndex<0)   // checks if user clicked a invalid area
            return;    // stops
        String chainName = chainsJList.getSelectedValue();  // gets selected chain name
        Chain c = context.getChainStore().readByKey(chainName);     // gets chain from context
        
        IPRule rule = c.getRules().get(ruleIndex);  // gets rule at such index from chain
        ConfigureRuleDialog form = new ConfigureRuleDialog(parent, true, rule,chainName);   // creates update form
        form.setLocationRelativeTo(parent); // sets form in middle of parent frame
        form.setVisible(true);  // shows form
        if(form.getFormResult()){   // if chosen to proceed
            IPRule updatedRule = form.getRule();   // gets configured rule
            
            try {
                context.getRuleStore().updateIndex(rule,updatedRule);    // replaces updated rule with one at such index
                bindRulesTable(c);  // updates chain rules table
            } catch (Exception ex) {    // checks if failed
                Logger.getLogger(FirewallPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(parent, "Failed to create rule\nError:"+ex.getMessage());
            }
        }

    }//GEN-LAST:event_updateRuleButtonActionPerformed

    private void deleteRuleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRuleButtonActionPerformed
        int ruleIndex = rulesTable.getSelectedRow();    // gets selected row
        if(ruleIndex<0)   // checks if user clicked a invalid area
            return;    // stops
        String chainName = this.chainsJList.getSelectedValue();
        Chain c = context.getChainStore().readByKey(chainName);
        IPRule rule = c.getRules().get(ruleIndex);  // gets rule from context
        ConfirmForm form = new ConfirmForm(parent,true);  // creates delete rule
        form.setLocationRelativeTo(parent); // sets form in middle of parent frame
        form.setMessage("Delete rule at row "+ruleIndex+"?");   // sets displaying message
        form.setVisible(true);  // shows form
        if(form.getFormResult()){   // checks if chosen to proceed
            try{
                context.getRuleStore().delete(rule);    // deletes rule from context
                bindRulesTable(c);  // updates chain rules table
            } catch(Exception err){ // checks if failed
                JOptionPane.showMessageDialog(parent, "Failed to delete rule number "+ruleIndex+"\nError:"+err.getMessage());
            }
        }
    }//GEN-LAST:event_deleteRuleButtonActionPerformed

    private void chainsJListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chainsJListMouseClicked
        if(chainsJList.getSelectedIndex()>=0){  // checks if user clicked a valid element
            String chainName = chainsJList.getSelectedValue();  // gets selected chain name
            Chain c = context.getChainStore().readByKey(chainName); // gets chain from list
            bindRulesTable(c);
        }
    }//GEN-LAST:event_chainsJListMouseClicked

    private void resetDefaultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetDefaultsButtonActionPerformed
        ConfirmForm form = new ConfirmForm(parent, true);     // creates confirm form
        form.setLocationRelativeTo(parent); // sets form in middle of parent frame
        form.setMessage("Restores IP table to default values?\nNote: All custom tables and rules will be deleted.");
        form.setButtonLabel("OK");
        form.setVisible(true);  // shows form
        if(form.getFormResult()){   // checks if chosen to proceed
            try {
                context.resetIPTable(); // reset iptables
                bindChainsList();   // updates chains list
                Chain inputChain = context.getChainStore().readByKey("INPUT");  // gets input chain from context
                bindRulesTable(inputChain);     // shows input chain rules
            } catch (Exception ex) {
                Logger.getLogger(FirewallPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(parent, "Failed to reset table.");
            }
        }
    }//GEN-LAST:event_resetDefaultsButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        try {
            refresh();
        } catch (Exception ex) {
            Logger.getLogger(FirewallPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(parent, "Failed to refresh context");
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageActionsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageActionsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageActionsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageActionsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new JFrame();
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                try{
                    IPContext context = new IPContext();
                    FirewallPanel panel = new FirewallPanel(frame);
                    frame.setContentPane(panel);
                    frame.pack();
                    frame.setVisible(true);
                } catch(Exception err){
                    err.printStackTrace();
                }
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addChainButton;
    private javax.swing.JList<String> chainsJList;
    private javax.swing.JButton createRuleButton;
    private javax.swing.JButton deleteChainButton;
    private javax.swing.JButton deleteRuleButton;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton renameChainButton;
    private javax.swing.JButton resetDefaultsButton;
    private javax.swing.JTable rulesTable;
    private javax.swing.JButton updateRuleButton;
    // End of variables declaration//GEN-END:variables

    private void refresh() throws Exception {
        
        this.context = new IPContext();
        bindChainsList();   // initializes chains list
    }
}
