/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wall2ban.fail2ban;

import java.awt.Frame;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import wall2ban.WaitingDialog;
import wall2ban.WaitingDialog.Worker;
import wall2ban.fail2ban.actionforms.ManageActionsForm;
import wall2ban.fail2ban.filiterforms.ManageFiltersForm;
import wall2ban.fail2ban.jailforms.ManageJailForm;

/**
 *
 * @author xceeded
 */
public class Fail2banPanel extends javax.swing.JPanel {

    /**
     * DAO context for fail2ban app.
     */
    private Fail2banContext context;
    /**
     * Parent frame of this panel.
     */
    private final Frame parent;
    
    /**
     * Creates new form Fail2banPanelForm
     * @param parent
     * @param context
     * @throws java.lang.Exception
     */
    public Fail2banPanel(Frame parent) throws Exception {
        initComponents();
        this.parent = parent;
        
        refresh();
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        manageFiltersButton = new javax.swing.JButton();
        manageJailsButton = new javax.swing.JButton();
        manualBanButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        manageActionsButton = new javax.swing.JButton();
        unbanButton = new javax.swing.JButton();
        unbanallButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        bannedIpsList = new javax.swing.JList<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        activeJailsList = new javax.swing.JList<>();
        switchButton = new javax.swing.JButton();
        stateLabel = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();

        jLabel1.setText("Status:");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Banned IPs");

        manageFiltersButton.setText("Manage Filters");
        manageFiltersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageFiltersButtonActionPerformed(evt);
            }
        });

        manageJailsButton.setText("Manage Jail");
        manageJailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageJailsButtonActionPerformed(evt);
            }
        });

        manualBanButton.setText("Manual Ban");
        manualBanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualBanButtonActionPerformed(evt);
            }
        });

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Active Jails");

        manageActionsButton.setText("Manage Actions");
        manageActionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageActionsButtonActionPerformed(evt);
            }
        });

        unbanButton.setText("Unban IP");
        unbanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unbanButtonActionPerformed(evt);
            }
        });

        unbanallButton.setText("Unban All");
        unbanallButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unbanallButtonActionPerformed(evt);
            }
        });

        bannedIpsList.setAutoscrolls(false);
        bannedIpsList.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        bannedIpsList.setVisibleRowCount(-1);
        jScrollPane1.setViewportView(bannedIpsList);

        jScrollPane3.setViewportView(jScrollPane1);

        activeJailsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        activeJailsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                activeJailsListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(activeJailsList);

        jScrollPane7.setViewportView(jScrollPane2);

        switchButton.setText("Turn ON");
        switchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchButtonActionPerformed(evt);
            }
        });

        stateLabel.setText("OFF");
        stateLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stateLabel)
                        .addGap(18, 18, 18)
                        .addComponent(switchButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(20, 20, 20))
                            .addComponent(manageJailsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(manageFiltersButton)
                                .addGap(18, 18, 18)
                                .addComponent(manageActionsButton)
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(131, 131, 131))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(manualBanButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(unbanallButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(unbanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(refreshButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(switchButton)
                    .addComponent(stateLabel)
                    .addComponent(refreshButton))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(manualBanButton)
                        .addGap(18, 18, 18)
                        .addComponent(unbanButton)
                        .addGap(18, 18, 18)
                        .addComponent(unbanallButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manageActionsButton)
                    .addComponent(manageFiltersButton)
                    .addComponent(manageJailsButton))
                .addContainerGap(29, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles what to do on 2 states.
     * @param isActivated 
     */
    private void handleStateChange(boolean isActivated) throws Exception{
        String stateLabel = isActivated ? "ON" : "OFF";
        String switchLabel = isActivated ? "Turn OFF" : "Turn ON";
        
        this.stateLabel.setText(stateLabel);
        this.switchButton.setText(switchLabel);
        
        this.manualBanButton.setEnabled(isActivated);
        this.unbanButton.setEnabled(isActivated);
        this.unbanallButton.setEnabled(isActivated);
        bindActiveJails();  // initializes list of active jails
    }
    
    
    private void bindActiveJails(){
        List<String> list = new ArrayList<String>();
        DefaultListModel model = new DefaultListModel();
        Comparator c = new Comparator<String>(){
            @Override
            public int compare(String a, String b){return a.compareTo(b);}
        };
        for(Jail jail : this.context.getJailStore().readActiveJails().keySet())
            list.add(jail.getName());   // adds all active jails to list
        list.sort(c);   // sorts name ascending
        model.addAll(list); // adds to model
        this.activeJailsList.setModel(model);   // sets model for jails list
    }
    /**
     * Displays list of banned IPs of a jail having {@code ajailIndex} index 
     * in active jail list (starts from 1 at top).
     * @param ajailIndex 
     */
    private void bindBannedIps(int ajailIndex) throws Exception{
        String jailName = this.activeJailsList.getModel().getElementAt(ajailIndex);  // gets jail name at specific index 
        List<String> ips = this.context.getJailStore().readActiveByKey(jailName).getValue();  // gets banned ip 

        DefaultListModel model = new DefaultListModel();
        model.addAll(ips);  // adds all banned ips to list model
        this.bannedIpsList.setModel(model); // sets model to list
        this.bannedIpsList.validate();  // request view update
    }
    
    
    private void manageFiltersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageFiltersButtonActionPerformed
        ManageFiltersForm manageFilter = new ManageFiltersForm(this.context.getFilterStore());
        manageFilter.setVisible(true);
    }//GEN-LAST:event_manageFiltersButtonActionPerformed

    private void manageJailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageJailsButtonActionPerformed
        ManageJailForm managejail = new ManageJailForm(this.context.getJailStore());
        managejail.setVisible(true);
    }//GEN-LAST:event_manageJailsButtonActionPerformed

    private void manualBanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualBanButtonActionPerformed
        if(this.activeJailsList.getSelectedIndex()<0)   // checks if user clicked a valid item
            return;
        String jailName = this.activeJailsList.getSelectedValue();  // gets jail name to get
        Jail jail = this.context.getJailStore().readByKey(jailName); // gets jail from list
        ManualBanDialog banDialog = new ManualBanDialog(parent,true);
        banDialog.setLocationRelativeTo(this);  // sets dialog center to this form
        List<String> jailNames = new ArrayList<String>();
        for(Jail key : context.getJailStore().readActiveJails().keySet())
            jailNames.add(key.getName());   // adds jail name to list
        banDialog.setJailsComboBoxItems(jailNames); // sets jail names to dialog combo box
        banDialog.setSelectedJail(jailName); // sets selected jail as combobox initial value
        banDialog.setVisible(true); // shows dialog
        
        if(banDialog.getFormResult()==true){    // checks if result is true
            String ip = banDialog.getIP();  // gets selected ip to be banned
            
            try{
                this.context.getJailStore().banJail(jail, ip);
                bindBannedIps(this.activeJailsList.getSelectedIndex());
            } catch(Exception err){
                System.out.println(err.getMessage());   // logs error to console
                // shows error message dialog
                JOptionPane.showMessageDialog(this, "Failed to ban IP.\nError: "+err.getMessage());
            }
        }
    }//GEN-LAST:event_manualBanButtonActionPerformed

    private void manageActionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageActionsButtonActionPerformed
        ManageActionsForm manageAction = new ManageActionsForm(context.getActionStore());
        manageAction.setVisible(true);
    }//GEN-LAST:event_manageActionsButtonActionPerformed

    private void unbanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unbanButtonActionPerformed
        String ip = this.bannedIpsList.getSelectedValue();  // gets selected ip
        UnbanIPDialog unbanDialog = new UnbanIPDialog(parent,true);
        unbanDialog.setLocationRelativeTo(this);  // sets dialog center to this form
        unbanDialog.setDisplayIP(ip);
        unbanDialog.setVisible(true);
        if(unbanDialog.getFormResult()){
            String jailName = this.activeJailsList.getSelectedValue();  // gets selected jail name
            Jail jail = context.getJailStore().readActiveByKey(jailName).getKey();
            try{
                context.getJailStore().unbanIP(jail, ip);
                bindBannedIps(this.activeJailsList.getSelectedIndex());
            } catch(Exception err){
                System.out.println(err.getMessage());
                JOptionPane.showMessageDialog(this, "Failed to unban IP.\nError: "+err.getMessage());
            }
        }
    }//GEN-LAST:event_unbanButtonActionPerformed

    private void unbanallButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unbanallButtonActionPerformed
        if(this.activeJailsList.getSelectedIndex()<0)   // checks if user clicked a valid item
            return;
        String jailName = this.activeJailsList.getSelectedValue();  // gets jail name to get
        Jail jail = this.context.getJailStore().readByKey(jailName); // gets jail from list
        UnbanAllDialog unbanAllDialog = new UnbanAllDialog(parent,true);
        unbanAllDialog.setLocationRelativeTo(this);  // sets dialog center to this form
        unbanAllDialog.setDisplayJailName(jail.getName());
        unbanAllDialog.setVisible(true);    // shows dialog
        if(unbanAllDialog.getFormResult()){ // checks if user pressed primary button
            try{
                context.getJailStore().unbanJail(jail); // unbans all ips of this jail
                bindBannedIps(this.activeJailsList.getSelectedIndex());
            } catch(Exception err){
                JOptionPane.showMessageDialog(this, err.getMessage());  // shows error dialog
            }
        }
    }//GEN-LAST:event_unbanallButtonActionPerformed

    private void activeJailsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_activeJailsListMouseClicked
        int index = this.activeJailsList.getSelectedIndex();
        if(index>=0){   // checks if user selected a valid item 
            try {
           
             bindBannedIps(index);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());  // shows error dialog
            }
        }
    }//GEN-LAST:event_activeJailsListMouseClicked

    private void switchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchButtonActionPerformed
        try {
            boolean activated = context.isActivated();  // gets f2b-client status
            if(activated)
                context.deactivate();
            else
                context.activate();
            activated =!activated; 
            handleStateChange(activated);   // handles current state
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Failed to modify status.\nError: "+ex.getMessage());
        }
    }//GEN-LAST:event_switchButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        try{
            refresh();
        } catch(Exception err){
            JOptionPane.showMessageDialog(parent, "Failed to refresh context");
        }
    }//GEN-LAST:event_refreshButtonActionPerformed
    private void refresh() throws Exception{
        context = new Fail2banContext();
        boolean activated = context.isActivated();  // gets fail2ban client status
        handleStateChange(activated);   // handles current state
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageActionsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageActionsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageActionsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageActionsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new JFrame();
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                try{
                    Fail2banContext context = new Fail2banContext();
                    Fail2banPanel panel = new Fail2banPanel(null);
                    frame.setContentPane(panel);
                    frame.pack();
                    frame.setVisible(true);
                } catch(Exception err){
                    err.printStackTrace();
                }
            }
        });
    }
    
    
    
    // <editor-fold desc="private variables">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> activeJailsList;
    private javax.swing.JList<String> bannedIpsList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JButton manageActionsButton;
    private javax.swing.JButton manageFiltersButton;
    private javax.swing.JButton manageJailsButton;
    private javax.swing.JButton manualBanButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JButton switchButton;
    private javax.swing.JButton unbanButton;
    private javax.swing.JButton unbanallButton;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
}
