/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wall2ban;

import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;

/**
 *
 * @author xceeded
 */
public class WaitingDialog extends javax.swing.JDialog {

    /**
     * Custom watcher.
     */
    private class ServeWorker extends SwingWorker<Void,String>{

        /**
         * Stop condition.
         */
        private SwingWorker worker;
        
        public ServeWorker(SwingWorker worker){
            this.worker = worker;
        }
        
        @Override
        protected Void doInBackground() throws Exception {
            String[] states = new String[]{"-","\\","|","/"};
            int n = states.length;
            int i = 0;
                try{
                    while(!worker.isDone()){    // checks if worker hasn't finished yet
                        publish(states[i%n]);   // sends text to display on view
                        ++i;
                        Thread.sleep(100);  // waits until next update
                    } 
                } catch (InterruptedException err){}
                return null;
        }
        @Override 
        protected void process(List<String> chunks){
            int size = chunks.size();   // gets size of chunks
            if(size<=0)
                return;
            
            String state = chunks.get(chunks.size()-1);
            serveLabel.setText(state);  // updates state
        }
        @Override
        protected void done(){
            dispose();  // disposes waiting form
        }
        
    }
    /**
     * Watcher thread and view updater.
     */
    private ServeWorker serve;
    /**
     * Creates new form WaitingDialog
     */
    public WaitingDialog(java.awt.Frame parent, boolean modal, String message, SwingWorker worker) {
        super(parent, modal);
        initComponents();
        this.serve = new ServeWorker(worker);
        this.label.setText(message);
        
    }

    public void setWorker(SwingWorker worker){
        serve.worker = worker;
    }
    
    @Override
    public void setVisible(boolean isVisible){
        serve.execute();
        super.setVisible(isVisible);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label = new javax.swing.JLabel();
        serveLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setText("label");
        label.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        serveLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        serveLabel.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(serveLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label)
                .addGap(31, 31, 31)
                .addComponent(serveLabel)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public class Worker extends SwingWorker<Void,Void>{
        private Runnable task;
        public Worker(Runnable task){
            super();
            this.task = task;
        }
        
        public void useRunnable(Runnable task){
            if(task==null)
                throw new java.lang.IllegalArgumentException();
            this.task = task;
        }

        @Override
        protected Void doInBackground() throws Exception {
            task.run();
            return null;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Runnable task = new Runnable(){
            @Override
            public void run(){
                for(int i = 0; i<3; ++i) 
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {}
            }
        };
        WaitingDialog wdialog = new WaitingDialog(null,false,"Counting to 100",null);
        SwingWorker<Void,Void> t = wdialog.new Worker(task);
        wdialog.setWorker(t);
        t.execute();
        wdialog.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel label;
    private javax.swing.JLabel serveLabel;
    // End of variables declaration//GEN-END:variables
}
